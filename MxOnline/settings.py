"""
Django settings for MxOnline project.

Generated by 'django-admin startproject' using Django 2.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
import sys
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))
sys.path.insert(0, os.path.join(BASE_DIR, 'extra_apps'))

'''logging模块'''
# 创建日志文件夹路径
LOG_DIR = os.path.join(BASE_DIR, 'log')
# 如过地址不存在，则自动创建log文件夹
if not os.path.isdir(LOG_DIR):
    os.mkdir(LOG_DIR)

# 日志配置
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # 是否禁用日志器

    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(message)s'
        },
        'simple': {
            'format': '  %(message)s'
        },
    },

    # 过滤器
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',  # 过滤掉调试信息'
        },
        'skip_static_requests': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': 'skip_static_requests'
        },
    },
    # 处理错误信息的对象
    'handlers': {
        'console': {
                    'level': 'INFO',
                    'class': 'logging.handlers.RotatingFileHandler',
                    'filename': os.path.join(LOG_DIR, 'Info'),
                    #'maxBytes': 1024 * 1024 * 5,
                    'backupCount': 5,
                    'encoding': 'utf-8',
                    'formatter': 'verbose'
        },
        'file': {
                    'level': 'WARNING',  # 记录WARNING级别以上的报错信息
                    'class': 'logging.handlers.RotatingFileHandler',
                    'filename': os.path.join(LOG_DIR, 'Warning'),
                    #'maxBytes': 5 * 1024 * 1024,
                    'backupCount': 5,
                    'formatter': 'verbose'
        }

    },
    'loggers': {
            # 日志器名
            'ClickStream': {
                'handlers': ['console', 'file'],
                'level': 'INFO'
            },
        }
}

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'xu+s%(*pqt741l%zp9$&)^3&z@4lpu8ha+)hzp4y%=-t!2o$7g'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

AUTHENTICATION_BACKENDS = (
    'users.views.CustomBackend',
)

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'users',
    'course',
    'operation',
    'organization',
    'xadmin',
    'crispy_forms',
    'captcha',
    'pure_pagination',
    'DjangoUeditor',

    'midlog',

]

MIDDLEWARE = [
    # 安全中间件、针对安全事件做拦截处理
    'django.middleware.security.SecurityMiddleware',
    # Session中间件、对用户的登录和退出做处理
    'django.contrib.sessions.middleware.SessionMiddleware',
    # 公共Common中间件、常用的中间件都放在CommonMiddleware中
    'django.middleware.common.CommonMiddleware',
    # CSRF中间件、一般用来做跨站攻击处理
    'django.middleware.csrf.CsrfViewMiddleware',
    # 用户认证登录中间件
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    # 消息处理、对用户的操作做处理
    'django.contrib.messages.middleware.MessageMiddleware',
    # 点击处理
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # 自定义
    'midlog.LogMiddleware.OpLog_Mid',
]

ROOT_URLCONF = 'MxOnline.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                #添加图片处理器，为了在课程列表中前面加上MEDIA_URL
                'django.template.context_processors.media',
            ],
        },
    },
]

WSGI_APPLICATION = 'MxOnline.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'django_test',        #数据库名字
        'USER': 'akaduo',          #账号
        'PASSWORD': 'akaduoadmin',      #密码
        'HOST': '127.0.0.1',    #IP
        'PORT': '3306',                   #端口
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# 发送邮箱

# EMAIL_HOST = "smtp.qq.com"
# EMAIL_PORT = 25
# EMAIL_HOST_USER = ""
# EMAIL_HOST_PASSWORD = ""
# EMAIL_USE_TLS = True
# EMAIL_FROM = ""


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False

AUTH_USER_MODEL = 'users.UserProfile'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
)


# 设置上传文件的路径
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')   # 指定根目录

# session 设置
SESSION_EXPIRE_AT_BROWSER_CLOSE = True  # 是否关闭浏览器使得Session过期（默认False）
SESSION_SAVE_EVERY_REQUEST = True  # 是否每次请求都保存Session，默认修改之后才保存（默认False）


